// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String       @id @default(cuid())
  email         String       @unique
  password_hash String
  role          String       @default("user")
  created_at    DateTime     @default(now())
  updated_at    DateTime     @updatedAt
  
  // Relations
  spaces        Space[]      @relation("SpaceOwner")
  memberships   Membership[]
  authoredPosts Post[]       @relation("PostAuthor")
  subscriptions Subscription[]
  qaThreads     QAThread[]   @relation("QAThreadCreator")
  qaMessages    QAMessage[]  @relation("QAMessageUser")
  
  @@map("users")
}

model Space {
  id          String       @id @default(cuid())
  ownerId     String
  name        String
  slug        String       @unique
  description String?
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  
  // Relations
  owner       User         @relation("SpaceOwner", fields: [ownerId], references: [id])
  posts       Post[]
  memberships Membership[]
  plans       Plan[]
  subscriptions Subscription[]
  qaThreads   QAThread[]
  
  @@map("spaces")
}

model Post {
  id           String    @id @default(cuid())
  spaceId      String
  authorId     String
  title        String
  content_md   String
  is_premium   Boolean   @default(false)
  published_at DateTime?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  
  // Relations
  space        Space     @relation(fields: [spaceId], references: [id])
  author       User      @relation("PostAuthor", fields: [authorId], references: [id])
  
  @@map("posts")
}

model Membership {
  id         String   @id @default(cuid())
  userId     String
  spaceId    String
  status     String   @default("none") // enum: free|paid|none
  started_at DateTime @default(now())
  
  // Relations
  user       User     @relation(fields: [userId], references: [id])
  space      Space    @relation(fields: [spaceId], references: [id])
  
  @@unique([userId, spaceId])
  @@map("memberships")
}

model Plan {
  id           String   @id @default(cuid())
  spaceId      String
  name         String   // e.g., "Monthly", "Yearly"
  interval     String   // enum: month|year
  price_cents  Int
  stripe_price_id String? // Stripe Price ID
  created_at   DateTime @default(now())
  
  // Relations
  space        Space    @relation(fields: [spaceId], references: [id])
  subscriptions Subscription[]
  
  @@map("plans")
}

model Subscription {
  id                  String   @id @default(cuid())
  userId              String
  spaceId             String
  planId              String?
  stripe_customer_id  String
  stripe_sub_id       String
  status              String   // enum: active|past_due|canceled|unpaid
  current_period_start DateTime
  current_period_end   DateTime
  created_at          DateTime @default(now())
  updated_at          DateTime @updatedAt
  
  // Relations
  user                User     @relation(fields: [userId], references: [id])
  space               Space    @relation(fields: [spaceId], references: [id])
  plan                Plan?    @relation(fields: [planId], references: [id])
  
  @@map("subscriptions")
}

model QAThread {
  id          String   @id @default(cuid())
  spaceId     String
  createdBy   String
  title       String
  status      String   @default("active") // enum: active|closed
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  
  // Relations
  space       Space    @relation(fields: [spaceId], references: [id])
  creator     User     @relation("QAThreadCreator", fields: [createdBy], references: [id])
  messages    QAMessage[]
  
  @@map("qa_threads")
}

model QAMessage {
  id         String   @id @default(cuid())
  threadId   String
  userId     String
  content    String
  is_answer  Boolean  @default(false)
  is_accepted Boolean @default(false)
  created_at DateTime @default(now())
  
  // Relations
  thread     QAThread @relation(fields: [threadId], references: [id])
  user       User     @relation("QAMessageUser", fields: [userId], references: [id])
  
  @@map("qa_messages")
}
